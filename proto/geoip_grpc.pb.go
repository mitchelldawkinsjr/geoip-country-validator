// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/geoip.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeoIPService_CheckCountry_FullMethodName = "/geoip.GeoIPService/CheckCountry"
	GeoIPService_Health_FullMethodName       = "/geoip.GeoIPService/Health"
)

// GeoIPServiceClient is the client API for GeoIPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GeoIP service definition
type GeoIPServiceClient interface {
	// Check if IP address is allowed in the given countries
	CheckCountry(ctx context.Context, in *CheckCountryRequest, opts ...grpc.CallOption) (*CheckCountryResponse, error)
	// Health check
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type geoIPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoIPServiceClient(cc grpc.ClientConnInterface) GeoIPServiceClient {
	return &geoIPServiceClient{cc}
}

func (c *geoIPServiceClient) CheckCountry(ctx context.Context, in *CheckCountryRequest, opts ...grpc.CallOption) (*CheckCountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckCountryResponse)
	err := c.cc.Invoke(ctx, GeoIPService_CheckCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoIPServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, GeoIPService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoIPServiceServer is the server API for GeoIPService service.
// All implementations must embed UnimplementedGeoIPServiceServer
// for forward compatibility.
//
// GeoIP service definition
type GeoIPServiceServer interface {
	// Check if IP address is allowed in the given countries
	CheckCountry(context.Context, *CheckCountryRequest) (*CheckCountryResponse, error)
	// Health check
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedGeoIPServiceServer()
}

// UnimplementedGeoIPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoIPServiceServer struct{}

func (UnimplementedGeoIPServiceServer) CheckCountry(context.Context, *CheckCountryRequest) (*CheckCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCountry not implemented")
}
func (UnimplementedGeoIPServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedGeoIPServiceServer) mustEmbedUnimplementedGeoIPServiceServer() {}
func (UnimplementedGeoIPServiceServer) testEmbeddedByValue()                      {}

// UnsafeGeoIPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoIPServiceServer will
// result in compilation errors.
type UnsafeGeoIPServiceServer interface {
	mustEmbedUnimplementedGeoIPServiceServer()
}

func RegisterGeoIPServiceServer(s grpc.ServiceRegistrar, srv GeoIPServiceServer) {
	// If the following call pancis, it indicates UnimplementedGeoIPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeoIPService_ServiceDesc, srv)
}

func _GeoIPService_CheckCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIPServiceServer).CheckCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoIPService_CheckCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIPServiceServer).CheckCountry(ctx, req.(*CheckCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoIPService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoIPServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeoIPService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoIPServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoIPService_ServiceDesc is the grpc.ServiceDesc for GeoIPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoIPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geoip.GeoIPService",
	HandlerType: (*GeoIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckCountry",
			Handler:    _GeoIPService_CheckCountry_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _GeoIPService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/geoip.proto",
}
